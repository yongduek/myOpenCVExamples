//
//  main.cpp
//  bgSub_MOGDemo
//
//  Created by Yongduek Seo on 10/28/14.
//  Copyright (c) 2014 Yongduek Seo. All rights reserved.
//

/**
 * @file bg_sub.cpp
 * @brief Background subtraction tutorial sample code
 * @author Domenico D. Bloisi
 */

//opencv
#include <opencv2/opencv.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>

using namespace cv;
using namespace std;

// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

/**
 * @function main
 */
int main(int argc, char* argv[])
{
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");
    
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(2000); //MOG2 approach
    

    cv::VideoCapture camera;
    int width, height;
    
    camera.open(0/*camera id*/);
    // size change for real-time
    camera.set(cv::CAP_PROP_FRAME_WIDTH, width=640);
    camera.set(cv::CAP_PROP_FRAME_HEIGHT, height=480);
    
    cv::Mat frame;
    unsigned frameCount=0;

    // 1. make background model on-line
    do {
        camera >> frame;
        if (frame.empty()) break;
        //update the background model
        ++frameCount;
        pMOG2->apply(frame, fgMaskMOG2); //flag/*0: no update*/);
    } while (frameCount<100);
    
    // 2. background subtraction
    do {
        camera >> frame; //read the current frame
        if (frame.empty()) break;
        
        //update the background model
//        ++frameCount;
//        bool flag = frameCount<50;
//        printf ("[%d] flag = %d\n", frameCount, flag);
        pMOG2->apply(frame, fgMaskMOG2, 0); //flag/*0: no update*/);
        
        //get the frame number and write it on the current frame
        stringstream ss;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        string frameNumberString = to_string(frameCount);
        putText(frame, frameNumberString.c_str(),
                cv::Point(15, 15), FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

        cv::Mat bin;
        cv::threshold(fgMaskMOG2, bin, 128, 255, cv::THRESH_BINARY);
        //show the current frame and the fg masks
        imshow ("bin", bin);
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);

        keyboard = waitKey( 30 );
    } while( (char)keyboard != 'q' && (char)keyboard != 27 );

    camera.release();
    destroyAllWindows();
    return EXIT_SUCCESS;
}

// EOF //